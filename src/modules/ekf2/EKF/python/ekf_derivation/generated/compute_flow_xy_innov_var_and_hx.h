// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <matrix/math.hpp>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: compute_flow_xy_innov_var_and_hx
 *
 * Args:
 *     state: Matrix26_1
 *     P: Matrix25_25
 *     distance: Scalar
 *     R: Scalar
 *     epsilon: Scalar
 *
 * Outputs:
 *     innov_var: Matrix21
 *     H: Matrix25_1
 */
template <typename Scalar>
void ComputeFlowXyInnovVarAndHx(const matrix::Matrix<Scalar, 26, 1>& state,
                                const matrix::Matrix<Scalar, 25, 25>& P, const Scalar distance,
                                const Scalar R, const Scalar epsilon,
                                matrix::Matrix<Scalar, 2, 1>* const innov_var = nullptr,
                                matrix::Matrix<Scalar, 25, 1>* const H = nullptr) {
  // Total ops: 302

  // Unused inputs
  (void)epsilon;

  // Input arrays

  // Intermediate terms (45)
  const Scalar _tmp0 = std::pow(state(1, 0), Scalar(2));
  const Scalar _tmp1 = std::pow(state(3, 0), Scalar(2));
  const Scalar _tmp2 = 1 - 2 * _tmp1;
  const Scalar _tmp3 = -2 * _tmp0 + _tmp2;
  const Scalar _tmp4 = std::pow(distance, Scalar(-state(25, 0)));
  const Scalar _tmp5 = _tmp4 * state(24, 0);
  const Scalar _tmp6 = _tmp3 * _tmp5;
  const Scalar _tmp7 = 2 * state(0, 0);
  const Scalar _tmp8 = _tmp7 * state(2, 0);
  const Scalar _tmp9 = 2 * state(1, 0);
  const Scalar _tmp10 = _tmp9 * state(3, 0);
  const Scalar _tmp11 = 2 * state(2, 0) * state(3, 0);
  const Scalar _tmp12 = _tmp9 * state(0, 0);
  const Scalar _tmp13 = std::pow(state(2, 0), Scalar(2));
  const Scalar _tmp14 = std::pow(state(0, 0), Scalar(2));
  const Scalar _tmp15 = -_tmp0;
  const Scalar _tmp16 = _tmp14 + _tmp15;
  const Scalar _tmp17 = _tmp5 * (state(4, 0) * (_tmp10 + _tmp8) + state(5, 0) * (_tmp11 - _tmp12) +
                                 state(6, 0) * (_tmp1 - _tmp13 + _tmp16));
  const Scalar _tmp18 = std::log(distance);
  const Scalar _tmp19 = _tmp7 * state(3, 0);
  const Scalar _tmp20 = -_tmp19;
  const Scalar _tmp21 = _tmp9 * state(2, 0);
  const Scalar _tmp22 = _tmp20 + _tmp21;
  const Scalar _tmp23 = _tmp11 + _tmp12;
  const Scalar _tmp24 = _tmp22 * state(4, 0) + _tmp23 * state(6, 0);
  const Scalar _tmp25 = _tmp4 * (_tmp24 + _tmp3 * state(5, 0));
  const Scalar _tmp26 = _tmp18 * _tmp25 * state(24, 0);
  const Scalar _tmp27 = _tmp22 * _tmp5;
  const Scalar _tmp28 = -_tmp10;
  const Scalar _tmp29 = -_tmp14;
  const Scalar _tmp30 = _tmp5 * (state(4, 0) * (_tmp1 + _tmp13 + _tmp15 + _tmp29) +
                                 state(5, 0) * (_tmp20 - _tmp21) + state(6, 0) * (_tmp28 + _tmp8));
  const Scalar _tmp31 = _tmp23 * _tmp5;
  const Scalar _tmp32 = -_tmp8;
  const Scalar _tmp33 = -_tmp1 + _tmp13;
  const Scalar _tmp34 =
      _tmp5 * (state(4, 0) * (_tmp28 + _tmp32) + state(5, 0) * (-_tmp11 + _tmp12) +
               state(6, 0) * (_tmp0 + _tmp29 + _tmp33));
  const Scalar _tmp35 = _tmp5 * (_tmp24 + state(5, 0) * (_tmp16 + _tmp33));
  const Scalar _tmp36 = _tmp10 + _tmp32;
  const Scalar _tmp37 = _tmp19 + _tmp21;
  const Scalar _tmp38 = -2 * _tmp13 + _tmp2;
  const Scalar _tmp39 = _tmp36 * state(6, 0) + _tmp37 * state(5, 0) + _tmp38 * state(4, 0);
  const Scalar _tmp40 = _tmp18 * _tmp39 * _tmp5;
  const Scalar _tmp41 = _tmp38 * _tmp5;
  const Scalar _tmp42 = _tmp37 * _tmp5;
  const Scalar _tmp43 = _tmp36 * _tmp5;
  const Scalar _tmp44 = _tmp39 * _tmp4;

  // Output terms (2)
  if (innov_var != nullptr) {
    matrix::Matrix<Scalar, 2, 1>& _innov_var = (*innov_var);

    _innov_var(0, 0) =
        R +
        _tmp17 * (P(0, 0) * _tmp17 + P(2, 0) * _tmp30 + P(23, 0) * _tmp25 - P(24, 0) * _tmp26 +
                  P(3, 0) * _tmp27 + P(4, 0) * _tmp6 + P(5, 0) * _tmp31) +
        _tmp25 * (P(0, 23) * _tmp17 + P(2, 23) * _tmp30 + P(23, 23) * _tmp25 - P(24, 23) * _tmp26 +
                  P(3, 23) * _tmp27 + P(4, 23) * _tmp6 + P(5, 23) * _tmp31) -
        _tmp26 * (P(0, 24) * _tmp17 + P(2, 24) * _tmp30 + P(23, 24) * _tmp25 - P(24, 24) * _tmp26 +
                  P(3, 24) * _tmp27 + P(4, 24) * _tmp6 + P(5, 24) * _tmp31) +
        _tmp27 * (P(0, 3) * _tmp17 + P(2, 3) * _tmp30 + P(23, 3) * _tmp25 - P(24, 3) * _tmp26 +
                  P(3, 3) * _tmp27 + P(4, 3) * _tmp6 + P(5, 3) * _tmp31) +
        _tmp30 * (P(0, 2) * _tmp17 + P(2, 2) * _tmp30 + P(23, 2) * _tmp25 - P(24, 2) * _tmp26 +
                  P(3, 2) * _tmp27 + P(4, 2) * _tmp6 + P(5, 2) * _tmp31) +
        _tmp31 * (P(0, 5) * _tmp17 + P(2, 5) * _tmp30 + P(23, 5) * _tmp25 - P(24, 5) * _tmp26 +
                  P(3, 5) * _tmp27 + P(4, 5) * _tmp6 + P(5, 5) * _tmp31) +
        _tmp6 * (P(0, 4) * _tmp17 + P(2, 4) * _tmp30 + P(23, 4) * _tmp25 - P(24, 4) * _tmp26 +
                 P(3, 4) * _tmp27 + P(4, 4) * _tmp6 + P(5, 4) * _tmp31);
    _innov_var(1, 0) =
        R -
        _tmp34 * (-P(1, 1) * _tmp34 - P(2, 1) * _tmp35 - P(23, 1) * _tmp44 + P(24, 1) * _tmp40 -
                  P(3, 1) * _tmp41 - P(4, 1) * _tmp42 - P(5, 1) * _tmp43) -
        _tmp35 * (-P(1, 2) * _tmp34 - P(2, 2) * _tmp35 - P(23, 2) * _tmp44 + P(24, 2) * _tmp40 -
                  P(3, 2) * _tmp41 - P(4, 2) * _tmp42 - P(5, 2) * _tmp43) +
        _tmp40 * (-P(1, 24) * _tmp34 - P(2, 24) * _tmp35 - P(23, 24) * _tmp44 + P(24, 24) * _tmp40 -
                  P(3, 24) * _tmp41 - P(4, 24) * _tmp42 - P(5, 24) * _tmp43) -
        _tmp41 * (-P(1, 3) * _tmp34 - P(2, 3) * _tmp35 - P(23, 3) * _tmp44 + P(24, 3) * _tmp40 -
                  P(3, 3) * _tmp41 - P(4, 3) * _tmp42 - P(5, 3) * _tmp43) -
        _tmp42 * (-P(1, 4) * _tmp34 - P(2, 4) * _tmp35 - P(23, 4) * _tmp44 + P(24, 4) * _tmp40 -
                  P(3, 4) * _tmp41 - P(4, 4) * _tmp42 - P(5, 4) * _tmp43) -
        _tmp43 * (-P(1, 5) * _tmp34 - P(2, 5) * _tmp35 - P(23, 5) * _tmp44 + P(24, 5) * _tmp40 -
                  P(3, 5) * _tmp41 - P(4, 5) * _tmp42 - P(5, 5) * _tmp43) -
        _tmp44 * (-P(1, 23) * _tmp34 - P(2, 23) * _tmp35 - P(23, 23) * _tmp44 + P(24, 23) * _tmp40 -
                  P(3, 23) * _tmp41 - P(4, 23) * _tmp42 - P(5, 23) * _tmp43);
  }

  if (H != nullptr) {
    matrix::Matrix<Scalar, 25, 1>& _h = (*H);

    _h.setZero();

    _h(0, 0) = _tmp17;
    _h(2, 0) = _tmp30;
    _h(3, 0) = _tmp27;
    _h(4, 0) = _tmp6;
    _h(5, 0) = _tmp31;
    _h(23, 0) = _tmp25;
    _h(24, 0) = -_tmp26;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
